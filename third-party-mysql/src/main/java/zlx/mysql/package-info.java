/**
 *
 *
 *  进行了事务的验证、测试
 *      1. commit
 *      2. rollback
 *      3. save point
 *    在不同情况下载的生效情况
 *      1. 模拟异常以便 rollback
 *      2. 模拟异常以便 save point的 commit
 *
 *  HighTPSTest 进行了性能测试。
 *   更新观念：
 *      1. 金额类的，非常适合补偿型的事务，由于余额是一个数字的加减，这意味着，加减的顺序不影响最终值
 *      2. 如果不想让使用者看到这个不一致的过程，可以再设置一个冻结金额表，第一阶段操作冻结金额的表，二阶段把冻结金额更新到余额
 *      3. 如果不想让余额被两个同时来的消费请求扣减为负数（也就是第二个请求来时，第一个请求扣减未生效），可以让一阶段检查 余额 - sum(冻结金额），然后再产生一笔新的冻结金额。
 */


package zlx.mysql;